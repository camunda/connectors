{
  "$schema" : "https://unpkg.com/@camunda/zeebe-element-templates-json-schema/resources/schema.json",
  "name" : "AI Agent",
  "id" : "io.camunda.connectors.agents.aiagent.v1",
  "description" : "AI Agent connector",
  "metadata" : {
    "keywords" : [ ]
  },
  "documentationRef" : "https://example.com",
  "version" : 1,
  "category" : {
    "id" : "connectors",
    "name" : "Connectors"
  },
  "appliesTo" : [ "bpmn:Task" ],
  "elementType" : {
    "value" : "bpmn:ServiceTask"
  },
  "groups" : [ {
    "id" : "provider",
    "label" : "Model Provider"
  }, {
    "id" : "authentication",
    "label" : "Authentication"
  }, {
    "id" : "model",
    "label" : "Model"
  }, {
    "id" : "context",
    "label" : "AI Agent Context"
  }, {
    "id" : "prompt",
    "label" : "Prompt"
  }, {
    "id" : "tools",
    "label" : "Tools"
  }, {
    "id" : "history",
    "label" : "History"
  }, {
    "id" : "guardrails",
    "label" : "Guardrails"
  }, {
    "id" : "output",
    "label" : "Output mapping"
  }, {
    "id" : "error",
    "label" : "Error handling"
  }, {
    "id" : "retries",
    "label" : "Retries"
  } ],
  "properties" : [ {
    "value" : "io.camunda.agents:aiagent:1",
    "binding" : {
      "property" : "type",
      "type" : "zeebe:taskDefinition"
    },
    "type" : "Hidden"
  }, {
    "id" : "provider.type",
    "label" : "Model Provider",
    "description" : "Specify the model provider to use.",
    "group" : "provider",
    "binding" : {
      "name" : "provider.type",
      "type" : "zeebe:input"
    },
    "type" : "Dropdown",
    "choices" : [ {
      "name" : "AWS Bedrock",
      "value" : "bedrock"
    }, {
      "name" : "OpenAI",
      "value" : "openai"
    } ]
  }, {
    "id" : "provider.bedrock.region",
    "label" : "Region",
    "description" : "Specify the AWS region",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "provider",
    "binding" : {
      "name" : "provider.bedrock.region",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.bedrock.endpoint",
    "label" : "Endpoint",
    "description" : "Specify endpoint if need to use a custom API endpoint",
    "optional" : true,
    "group" : "provider",
    "binding" : {
      "name" : "provider.bedrock.endpoint",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "Hidden"
  }, {
    "id" : "provider.openai.endpoint",
    "label" : "Endpoint",
    "description" : "Specify endpoint if need to use a custom API endpoint",
    "optional" : true,
    "group" : "provider",
    "binding" : {
      "name" : "provider.openai.endpoint",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "Hidden"
  }, {
    "id" : "provider.bedrock.authentication.type",
    "label" : "Authentication",
    "description" : "Specify AWS authentication strategy. Learn more at the <a href=\"https://docs.camunda.io/docs/components/connectors/out-of-the-box-connectors/aws-lambda/#aws-authentication-types\" target=\"_blank\">documentation page</a>",
    "value" : "credentials",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.bedrock.authentication.type",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "Dropdown",
    "choices" : [ {
      "name" : "Default Credentials Chain (Hybrid/Self-Managed only)",
      "value" : "defaultCredentialsChain"
    }, {
      "name" : "Credentials",
      "value" : "credentials"
    } ]
  }, {
    "id" : "provider.bedrock.authentication.accessKey",
    "label" : "Access key",
    "description" : "Provide an IAM access key tailored to a user, equipped with the necessary permissions",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.bedrock.authentication.accessKey",
      "type" : "zeebe:input"
    },
    "condition" : {
      "allMatch" : [ {
        "property" : "provider.bedrock.authentication.type",
        "equals" : "credentials",
        "type" : "simple"
      }, {
        "property" : "provider.type",
        "equals" : "bedrock",
        "type" : "simple"
      } ]
    },
    "type" : "String"
  }, {
    "id" : "provider.bedrock.authentication.secretKey",
    "label" : "Secret key",
    "description" : "Provide a secret key of a user with permissions to invoke specified AWS Lambda function",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.bedrock.authentication.secretKey",
      "type" : "zeebe:input"
    },
    "condition" : {
      "allMatch" : [ {
        "property" : "provider.bedrock.authentication.type",
        "equals" : "credentials",
        "type" : "simple"
      }, {
        "property" : "provider.type",
        "equals" : "bedrock",
        "type" : "simple"
      } ]
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.authentication.apiKey",
    "label" : "OpenAI API Key",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.openai.authentication.apiKey",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.authentication.organization",
    "label" : "Organization",
    "description" : "For members of multiple organizations. Details in the <a href=\"https://platform.openai.com/docs/api-reference/requesting-organization\" target=\"_blank\">OpenAI documentation</a>.",
    "optional" : true,
    "feel" : "optional",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.openai.authentication.organization",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.authentication.project",
    "label" : "Project",
    "description" : "For members with multiple projects.",
    "optional" : true,
    "feel" : "optional",
    "group" : "authentication",
    "binding" : {
      "name" : "provider.openai.authentication.project",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.bedrock.model.model",
    "label" : "Model",
    "optional" : false,
    "value" : "anthropic.claude-3-5-sonnet-20240620-v1:0",
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.bedrock.model.model",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.bedrock.model.parameters.temperature",
    "label" : "Temperature",
    "optional" : true,
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.bedrock.model.parameters.temperature",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.bedrock.model.parameters.maxOutputTokens",
    "label" : "Maximum Output Tokens",
    "optional" : true,
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.bedrock.model.parameters.maxOutputTokens",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "bedrock",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.model.model",
    "label" : "Model",
    "optional" : false,
    "value" : "gpt-4o",
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.openai.model.model",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.model.parameters.temperature",
    "label" : "Temperature",
    "optional" : true,
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.openai.model.parameters.temperature",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "provider.openai.model.parameters.maxOutputTokens",
    "label" : "Maximum Output Tokens",
    "optional" : true,
    "feel" : "optional",
    "group" : "model",
    "binding" : {
      "name" : "provider.openai.model.parameters.maxOutputTokens",
      "type" : "zeebe:input"
    },
    "condition" : {
      "property" : "provider.type",
      "equals" : "openai",
      "type" : "simple"
    },
    "type" : "String"
  }, {
    "id" : "data.agentContext",
    "label" : "Agent Context",
    "description" : "The agent context variable containing the conversation history.",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "required",
    "group" : "context",
    "binding" : {
      "name" : "data.context",
      "type" : "zeebe:input"
    },
    "type" : "Text"
  }, {
    "id" : "data.systemPrompt.systemPrompt",
    "label" : "System Prompt",
    "description" : "Specify the system prompt",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "prompt",
    "binding" : {
      "name" : "data.systemPrompt.systemPrompt",
      "type" : "zeebe:input"
    },
    "type" : "Text"
  }, {
    "id" : "data.userPrompt.userPrompt",
    "label" : "User Prompt",
    "description" : "Specify the user prompt",
    "optional" : false,
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "prompt",
    "binding" : {
      "name" : "data.userPrompt.userPrompt",
      "type" : "zeebe:input"
    },
    "type" : "Text"
  }, {
    "id" : "data.tools.containerElementId",
    "label" : "Ad-hoc subprocess ID containing tools",
    "description" : "The ID of the subprocess containing the tools to be called",
    "optional" : true,
    "feel" : "optional",
    "group" : "tools",
    "binding" : {
      "name" : "data.tools.containerElementId",
      "type" : "zeebe:input"
    },
    "type" : "String"
  }, {
    "id" : "data.tools.toolCallResults",
    "label" : "Tool Call Results",
    "description" : "Tool call results as returned by the subprocess",
    "optional" : true,
    "feel" : "required",
    "group" : "tools",
    "binding" : {
      "name" : "data.tools.toolCallResults",
      "type" : "zeebe:input"
    },
    "type" : "Text"
  }, {
    "id" : "data.history.maxMessages",
    "label" : "Maximum amount of messages to keep in history",
    "optional" : false,
    "value" : "20",
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "history",
    "binding" : {
      "name" : "data.history.maxMessages",
      "type" : "zeebe:input"
    },
    "type" : "String"
  }, {
    "id" : "data.guardrails.maxModelCalls",
    "label" : "Maximum number of calls to the model",
    "optional" : false,
    "value" : "10",
    "constraints" : {
      "notEmpty" : true
    },
    "feel" : "optional",
    "group" : "guardrails",
    "binding" : {
      "name" : "data.guardrails.maxModelCalls",
      "type" : "zeebe:input"
    },
    "type" : "String"
  }, {
    "id" : "resultVariable",
    "label" : "Result variable",
    "description" : "Name of variable to store the response in",
    "group" : "output",
    "binding" : {
      "key" : "resultVariable",
      "type" : "zeebe:taskHeader"
    },
    "type" : "String"
  }, {
    "id" : "resultExpression",
    "label" : "Result expression",
    "description" : "Expression to map the response into process variables",
    "feel" : "required",
    "group" : "output",
    "binding" : {
      "key" : "resultExpression",
      "type" : "zeebe:taskHeader"
    },
    "type" : "Text"
  }, {
    "id" : "errorExpression",
    "label" : "Error expression",
    "description" : "Expression to handle errors. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/\" target=\"_blank\">documentation</a>.",
    "feel" : "required",
    "group" : "error",
    "binding" : {
      "key" : "errorExpression",
      "type" : "zeebe:taskHeader"
    },
    "type" : "Text"
  }, {
    "id" : "retryCount",
    "label" : "Retries",
    "description" : "Number of retries",
    "value" : "3",
    "feel" : "optional",
    "group" : "retries",
    "binding" : {
      "property" : "retries",
      "type" : "zeebe:taskDefinition"
    },
    "type" : "String"
  }, {
    "id" : "retryBackoff",
    "label" : "Retry backoff",
    "description" : "ISO-8601 duration to wait between retries",
    "value" : "PT0S",
    "group" : "retries",
    "binding" : {
      "key" : "retryBackoff",
      "type" : "zeebe:taskHeader"
    },
    "type" : "String"
  } ]
}