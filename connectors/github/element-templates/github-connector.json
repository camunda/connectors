{
  "$schema": "https://unpkg.com/@camunda/zeebe-element-templates-json-schema/resources/schema.json",
  "name": "GitHub Outbound Connector",
  "id": "io.camunda.connectors.GitHub.v1",
  "version": 7,
  "description": "Manage issues, branches, releases, and more",
  "icon": {
    "contents": "data:image/svg+xml;utf8,%3Csvg width='98' height='96' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z' fill='%2324292f'/%3E%3C/svg%3E"
  },
  "documentationRef": "https://docs.camunda.io/docs/components/connectors/out-of-the-box-connectors/github/?github=outbound",
  "category": {
    "id": "connectors",
    "name": "Connectors"
  },
  "appliesTo": [
    "bpmn:Task"
  ],
  "elementType": {
    "value": "bpmn:ServiceTask"
  },
  "groups": [
    {
      "id": "operation",
      "label": "Operation"
    },
    {
      "id": "authentication",
      "label": "Authentication"
    },
    {
      "id": "configuration",
      "label": "Configuration"
    },
    {
      "id": "input",
      "label": "Input"
    },
    {
      "id": "output",
      "label": "Output"
    },
    {
      "id": "errors",
      "label": "Error handling"
    }
  ],
  "properties": [
    {
      "type": "Hidden",
      "value": "io.camunda:http-json:1",
      "binding": {
        "type": "zeebe:taskDefinition:type"
      }
    },
    {
      "label": "Operation group",
      "id": "operationGroup",
      "group": "operation",
      "description": "Choose operation group",
      "value": "issues",
      "type": "Dropdown",
      "choices": [
        {
          "name": "Issues",
          "value": "issues"
        },
        {
          "name": "Releases",
          "value": "releases"
        },
        {
          "name": "Branches",
          "value": "branches"
        },
        {
          "name": "Repositories",
          "value": "repositories"
        },
        {
          "name": "Code scanning",
          "value": "codeScanning"
        },
        {
          "name": "Actions",
          "value": "actions"
        },
        {
          "name": "References",
          "value": "references"
        },
        {
          "name": "Pulls",
          "value": "pulls"
        },
        {
          "name": "Collaborators",
          "value": "collaborators"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "operationGroup"
      }
    },
    {
      "label": "Operation type",
      "id": "issueOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "createIssue",
      "choices": [
        {
          "name": "Create an issue",
          "value": "createIssue"
        },
        {
          "name": "Get an issue",
          "value": "getIssue"
        },
        {
          "name": "Update an issue",
          "value": "updateIssue"
        },
        {
          "name": "Create an issue comment",
          "value": "createIssueComment"
        },
        {
          "name": "Search issues and pull requests",
          "value": "searchIssues"
        },
        {
          "name": "List commits",
          "value": "listCommits"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "issues"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "releaseOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "createRelease",
      "choices": [
        {
          "name": "Create a release",
          "value": "createRelease"
        },
        {
          "name": "Update a release",
          "value": "updateRelease"
        },
        {
          "name": "Delete a release",
          "value": "deleteRelease"
        },
        {
          "name": "List releases",
          "value": "listReleases"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "releases"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "branchOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "listBranches",
      "choices": [
        {
          "name": "List branches",
          "value": "listBranches"
        },
        {
          "name": "Get a branch",
          "value": "getBranch"
        },
        {
          "name": "Merge a branch",
          "value": "mergeBranch"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "branches"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "reposOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "listOrganizationRepos",
      "choices": [
        {
          "name": "List organization repositories",
          "value": "listOrganizationRepos"
        },
        {
          "name": "Create an organization repository",
          "value": "createOrganizationRepo"
        },
        {
          "name": "Get a repository",
          "value": "getRepo"
        },
        {
          "name": "Update a repository",
          "value": "updateRepo"
        },
        {
          "name": "Delete a repository",
          "value": "deleteRepo"
        },
        {
          "name": "List repository contributors",
          "value": "listRepoContributors"
        },
        {
          "name": "Create an organization invitation",
          "value": "orgInvitation"
        },
        {
          "name": "Get repository content",
          "value": "getRepoContent"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "repositories"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "listAlertsOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "listAlertsForRepo",
      "choices": [
        {
          "name": "List code scanning alerts for a repository",
          "value": "listAlertsForRepo"
        },
        {
          "name": "List code scanning alerts for an organization",
          "value": "listAlertsForOrg"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "codeScanning"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "eventOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "createWorkflowDispatchEvent",
      "choices": [
        {
          "name": "Create a workflow dispatch event",
          "value": "createWorkflowDispatchEvent"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "actions"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "referenceOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "createReference",
      "choices": [
        {
          "name": "Create a reference",
          "value": "createReference"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "references"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "pullRequestOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "createPullRequest",
      "choices": [
        {
          "name": "Create a pull request",
          "value": "createPullRequest"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "pulls"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "label": "Operation type",
      "id": "listCollaboratorsOperationType",
      "group": "operation",
      "type": "Dropdown",
      "value": "listCollaborators",
      "choices": [
        {
          "name": "List repository collaborators",
          "value": "listCollaborators"
        }
      ],
      "condition": {
        "property": "operationGroup",
        "oneOf": [
          "collaborators"
        ]
      },
      "binding": {
        "type": "zeebe:input",
        "name": "operationType"
      }
    },
    {
      "type": "Hidden",
      "label": "Type",
      "id": "authenticationType",
      "group": "authentication",
      "value": "bearer",
      "binding": {
        "type": "zeebe:input",
        "name": "authentication.type"
      }
    },
    {
      "label": "GitHub personal token",
      "group": "authentication",
      "description": "GitHub personal token, needs repository and workflow scope",
      "type": "String",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "authentication.token"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "authenticationType",
        "equals": "bearer"
      }
    },
    {
      "id": "refMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "id": "eventMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "id": "reposMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo",
          "orgInvitation"
        ]
      }
    },
    {
      "id": "branchMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch"
        ]
      }
    },
    {
      "id": "releaseMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease"
        ]
      }
    },
    {
      "id": "issueMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "createIssueComment"
        ]
      }
    },
    {
      "id": "pullRequestMethodPost",
      "group": "configuration",
      "type": "Hidden",
      "value": "post",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "id": "reposMethodPatch",
      "group": "configuration",
      "type": "Hidden",
      "value": "patch",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "updateRepo"
        ]
      }
    },
    {
      "id": "releaseMethodPatch",
      "group": "configuration",
      "type": "Hidden",
      "value": "patch",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "updateRelease"
        ]
      }
    },
    {
      "id": "issueMethodPatch",
      "group": "configuration",
      "type": "Hidden",
      "value": "patch",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "updateIssue"
        ]
      }
    },
    {
      "id": "repoMethodDelete",
      "group": "configuration",
      "type": "Hidden",
      "value": "delete",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "deleteRepo"
        ]
      }
    },
    {
      "id": "releaseMethodDelete",
      "group": "configuration",
      "type": "Hidden",
      "value": "delete",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "deleteRelease"
        ]
      }
    },
    {
      "id": "listMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "id": "alertsMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "listAlertsOperationType",
        "oneOf": [
          "listAlertsForRepo",
          "listAlertsForOrg"
        ]
      }
    },
    {
      "id": "reposMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos",
          "getRepo",
          "listRepoContributors",
          "getRepoContent"
        ]
      }
    },
    {
      "id": "branchMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "listBranches",
          "getBranch"
        ]
      }
    },
    {
      "id": "releaseMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "listReleases"
        ]
      }
    },
    {
      "id": "issueMethodGet",
      "group": "configuration",
      "type": "Hidden",
      "value": "get",
      "binding": {
        "type": "zeebe:input",
        "name": "method"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "searchIssues",
          "getIssue",
          "listCommits"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "listAlertsOperationType",
        "oneOf": [
          "listAlertsForRepo"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepo",
          "deleteRepo",
          "updateRepo",
          "listRepoContributors",
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch",
          "listBranches",
          "getBranch"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease",
          "deleteRelease",
          "listReleases"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "getIssue",
          "updateIssue",
          "createIssueComment",
          "listCommits"
        ]
      }
    },
    {
      "label": "Owner",
      "description": "Repository owner",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "owner"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "listAlertsOperationType",
        "oneOf": [
          "listAlertsForRepo"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepo",
          "deleteRepo",
          "updateRepo",
          "listRepoContributors",
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch",
          "listBranches",
          "getBranch"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease",
          "deleteRelease",
          "listReleases"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "getIssue",
          "updateIssue",
          "createIssueComment",
          "listCommits"
        ]
      }
    },
    {
      "label": "Repository",
      "description": "Name of the repository",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "repo"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Issue number",
      "description": "The number that identifies the issue",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "issueNumber"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "getIssue",
          "updateIssue",
          "createIssueComment"
        ]
      }
    },
    {
      "label": "Release ID",
      "description": "The unique identifier of the release",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "releaseId"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "updateRelease",
          "deleteRelease"
        ]
      }
    },
    {
      "label": "Query",
      "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "searchQuery"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "searchIssues"
        ]
      }
    },
    {
      "label": "Title",
      "description": "The title of the issue",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "issueTitle"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue"
        ]
      }
    },
    {
      "label": "Title",
      "description": "The title of the issue",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "issueTitle"
      },
      "optional": true,
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "updateIssue"
        ]
      }
    },
    {
      "label": "Body",
      "description": "The contents of the issue or release",
      "feel": "optional",
      "group": "input",
      "type": "Text",
      "binding": {
        "type": "zeebe:input",
        "name": "githubBody"
      },
      "optional": true,
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease"
        ]
      }
    },
    {
      "label": "Body",
      "description": "The contents of the issue or release",
      "feel": "optional",
      "group": "input",
      "type": "Text",
      "binding": {
        "type": "zeebe:input",
        "name": "githubBody"
      },
      "optional": true,
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "updateIssue"
        ]
      }
    },
    {
      "label": "Body",
      "description": "The contents of the issue comment",
      "feel": "optional",
      "group": "input",
      "constraints": {
        "notEmpty": true
      },
      "type": "Text",
      "binding": {
        "type": "zeebe:input",
        "name": "githubBody"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssueComment"
        ]
      }
    },
    {
      "label": "Assignees",
      "description": "Logins for users to assign to this issue as an array of strings",
      "feel": "required",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "issueAssignees"
      },
      "optional": true,
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "updateIssue"
        ]
      }
    },
    {
      "label": "Labels",
      "description": "Labels to associate with this issue as an array of strings",
      "feel": "required",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "issueLabels"
      },
      "optional": true,
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "updateIssue"
        ]
      }
    },
    {
      "label": "Tag name",
      "description": "Name of the tag",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "tagName"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease"
        ]
      }
    },
    {
      "label": "Milestone",
      "description": "The number of the milestone to associate this issue with",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "issueMilestone"
      },
      "optional": true,
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "updateIssue"
        ]
      }
    },
    {
      "label": "Release name",
      "description": "The name of the release",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "releaseName"
      },
      "optional": true,
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease"
        ]
      }
    },
    {
      "label": "Repository name",
      "description": "The name of the repository",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "repoName"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo"
        ]
      }
    },
    {
      "label": "Repository name",
      "description": "The name of the repository",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "repoName"
      },
      "optional": true,
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "updateRepo"
        ]
      }
    },
    {
      "label": "Branch name",
      "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use the GraphQL API",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "branchName"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "getBranch"
        ]
      }
    },
    {
      "label": "Base",
      "description": "The name of the base branch that the head will be merged into",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "branchBase"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch"
        ]
      }
    },
    {
      "label": "Head",
      "description": "The head to merge. This can be a branch name or a commit SHA1",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "branchHead"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch"
        ]
      }
    },
    {
      "label": "Organization name",
      "description": "The organization name. The name is not case sensitive",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "orgName"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "listAlertsOperationType",
        "oneOf": [
          "listAlertsForOrg"
        ]
      }
    },
    {
      "label": "Organization name",
      "description": "The organization name. The name is not case sensitive",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "orgName"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos",
          "createOrganizationRepo",
          "orgInvitation"
        ]
      }
    },
    {
      "label": "Description",
      "description": "A short description of the repository",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "repoDescription"
      },
      "optional": true,
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo",
          "updateRepo"
        ]
      }
    },
    {
      "label": "Home page",
      "description": "A URL with more information about the repository",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "repoHomePage"
      },
      "optional": true,
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo",
          "updateRepo"
        ]
      }
    },
    {
      "label": "Visibility",
      "description": "The visibility of the repository",
      "id": "repoVisibility",
      "group": "input",
      "type": "Dropdown",
      "value": "private",
      "choices": [
        {
          "name": "Private",
          "value": "private"
        },
        {
          "name": "Public",
          "value": "public"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "repoVisibility"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo",
          "updateRepo"
        ]
      }
    },
    {
      "label": "Type",
      "description": "Specifies the types of repositories you want returned",
      "id": "repoType",
      "group": "input",
      "type": "Dropdown",
      "value": "all",
      "choices": [
        {
          "name": "All",
          "value": "all"
        },
        {
          "name": "Public",
          "value": "public"
        },
        {
          "name": "Private",
          "value": "private"
        },
        {
          "name": "Forks",
          "value": "forks"
        },
        {
          "name": "Sources",
          "value": "sources"
        },
        {
          "name": "Memeber",
          "value": "member"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "repoType"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos"
        ]
      }
    },
    {
      "label": "Sort",
      "description": "The property to sort the results by",
      "id": "repoSort",
      "group": "input",
      "type": "Dropdown",
      "value": "created",
      "choices": [
        {
          "name": "Created",
          "value": "created"
        },
        {
          "name": "Updated",
          "value": "updated"
        },
        {
          "name": "Pushed",
          "value": "pushed"
        },
        {
          "name": "Full name",
          "value": "full_name"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "repoSort"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos"
        ]
      }
    },
    {
      "label": "Sort order",
      "description": "The order to sort by. Default: asc when using full_name, otherwise desc",
      "id": "repoSortOrder",
      "group": "input",
      "type": "Dropdown",
      "value": "true",
      "choices": [
        {
          "name": "Ascending",
          "value": "asc"
        },
        {
          "name": "Descending",
          "value": "desc"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "repoSortOrder"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos"
        ]
      }
    },
    {
      "label": "Commit message",
      "description": "Commit message to use for the merge commit. If omitted, a default message will be used",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "commitMessage"
      },
      "optional": true,
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch"
        ]
      }
    },
    {
      "label": "Make latest",
      "id": "makeLatest",
      "group": "input",
      "type": "Dropdown",
      "value": "true",
      "choices": [
        {
          "name": "True",
          "value": "true"
        },
        {
          "name": "False",
          "value": "false"
        },
        {
          "name": "Legacy",
          "value": "legacy"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "makeLatest"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease"
        ]
      }
    },
    {
      "label": "Invite email",
      "description": "Email address of the person you are inviting, which can be an existing GitHub user",
      "feel": "optional",
      "group": "input",
      "type": "String",
      "binding": {
        "type": "zeebe:input",
        "name": "orgInvitationEmail"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "orgInvitation"
        ]
      }
    },
    {
      "label": "Role",
      "description": "The role for the new member",
      "id": "orgInvitationRole",
      "group": "input",
      "type": "Dropdown",
      "value": "admin",
      "choices": [
        {
          "name": "Admin",
          "value": "admin"
        },
        {
          "name": "Direct member",
          "value": "direct_member"
        },
        {
          "name": "Billing manager",
          "value": "billing_manage"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "orgInvitationRole"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "orgInvitation"
        ]
      }
    },
    {
      "label": "Issue state",
      "description": "The open or closed state of the issue",
      "id": "issueState",
      "group": "input",
      "type": "Dropdown",
      "value": "open",
      "choices": [
        {
          "name": "Open",
          "value": "open"
        },
        {
          "name": "Closed",
          "value": "closed"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "issueState"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "updateIssue"
        ]
      }
    },
    {
      "label": "State reason",
      "description": "The reason for the state change. Ignored unless state is changed",
      "id": "issueStateReason",
      "group": "input",
      "type": "Dropdown",
      "value": "completed",
      "choices": [
        {
          "name": "Completed",
          "value": "completed"
        },
        {
          "name": "Not planned",
          "value": "not_planned"
        },
        {
          "name": "Reopened",
          "value": "reopened"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "issueStateReason"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "updateIssue"
        ]
      }
    },
    {
      "label": "Git reference",
      "description": "Branch or tag name for the workflow",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "gitReference"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "label": "Workflow ID",
      "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
      "group": "configuration",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "workflowId"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "label": "Workflow inputs",
      "description": "An object containing up to 10 key-value pairs",
      "group": "input",
      "type": "Text",
      "feel": "required",
      "value": "={}",
      "binding": {
        "type": "zeebe:input",
        "name": "workflowInputs"
      },
      "optional": true,
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "label": "Git reference",
      "description": "Name of the fully qualified reference",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "gitReference"
      },
      "constraints": {
        "notEmpty": true,
        "pattern": {
          "value": "^(=.+|refs\\/[^\\/]+\\/[^\\/]*)",
          "message": "must be a fully qualified reference (i.e: refs/heads/main) starting with \"refs\" and containing at least two slashes."
        }
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "label": "SHA",
      "description": "The SHA1 value for this reference",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "sha"
      },
      "constraints": {
        "notEmpty": true,
        "pattern": {
          "value": "^(=.+|.{40})",
          "message": "must consist of 40 characters."
        }
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "label": "Title",
      "description": "The title of the new pull request",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "title"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Head",
      "description": "The name of the branch where your changes are implemented",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "head"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Base",
      "description": "The name of the branch you want the changes pulled into",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "base"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Body",
      "description": "The contents of the pull request",
      "group": "input",
      "type": "Text",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "prBody"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Draft",
      "description": "Indicates whether the pull request is a draft",
      "group": "input",
      "type": "Boolean",
      "feel": "optional",
      "value": "=false",
      "binding": {
        "type": "zeebe:input",
        "name": "draft"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Include anonymous contributors",
      "group": "input",
      "type": "Boolean",
      "feel": "optional",
      "value": "=false",
      "binding": {
        "type": "zeebe:input",
        "name": "anon"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Page",
      "description": "The page number of the results to fetch",
      "group": "input",
      "type": "Number",
      "feel": "optional",
      "value": "1",
      "binding": {
        "type": "zeebe:input",
        "name": "page"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Results per page",
      "description": "The number of results to include per page",
      "group": "input",
      "type": "Number",
      "feel": "optional",
      "value": "30",
      "binding": {
        "type": "zeebe:input",
        "name": "per_page"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Path",
      "description": "The path of the content within the repository",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "contentPath"
      },
      "constraints": {
        "notEmpty": true
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Ref",
      "description": "The name of the commit/branch/tag. Default: the repository's main branch",
      "group": "input",
      "type": "String",
      "feel": "optional",
      "value": "",
      "binding": {
        "type": "zeebe:input",
        "name": "ref"
      },
      "optional": true,
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepoContent"
        ]
      }
    },
    {
      "group": "configuration",
      "type": "Hidden",
      "value": "={\"Content-Type\":\"application/vnd.github+json\", \"X-GitHub-Api-Version\":\"2022-11-28\"}",
      "binding": {
        "type": "zeebe:input",
        "name": "headers"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"title\": if issueTitle = null then null else issueTitle, \"body\":if githubBody = null then null else githubBody,\"assignees\":if issueAssignees = null then null else issueAssignees,\"milestone\":if issueMilestone = null then null else issueMilestone,\"labels\":if issueLabels = null then null else issueLabels}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue",
          "updateIssue"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"body\":if githubBody = null then null else githubBody}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssueComment"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"tag_name\": tagName, \"body\":if githubBody = null then null else githubBody,\"name\":if name = null then null else name,\"make_latest\":if makeLatest = null then null else makeLatest}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease",
          "updateRelease"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"name\": if repoName = null then null else repoName, \"description\": if repoDescription = null then null else repoDescription,\"homepage\": if repoHomePage = null then null else repoHomePage,\"visibility\": repoVisibility}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo",
          "updateRepo"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"email\": orgInvitationEmail, \"role\": orgInvitationRole}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "orgInvitation"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"ref\": if gitReference = null then null else gitReference, \"inputs\":workflowInputs}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"ref\": if gitReference = null then null else gitReference, \"sha\": if sha = null then null else sha}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"title\": if title = null then null else title, \"head\": if head = null then null else head, \"base\": if base = null then null else base, \"body\": if prBody = null then null else prBody, \"draft\": if draft = null then null else draft}",
      "binding": {
        "type": "zeebe:input",
        "name": "body"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      },
      "optional": true
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"type\": repoType, \"sort\": repoSortOrder, \"direction\": repoSortOrder}",
      "binding": {
        "type": "zeebe:input",
        "name": "queryParameters"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos"
        ]
      }
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"q\": searchQuery}",
      "binding": {
        "type": "zeebe:input",
        "name": "queryParameters"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "searchIssues"
        ]
      }
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"anon\": if anon = null then null else anon, \"per_page\": if per_page = null then null else per_page, \"page\": if page = null then null else page}",
      "binding": {
        "type": "zeebe:input",
        "name": "queryParameters"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "group": "input",
      "type": "Hidden",
      "value": "={\"ref\": if ref = null then null else ref}",
      "binding": {
        "type": "zeebe:input",
        "name": "queryParameters"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Result variable",
      "description": "Name of variable to store the response in. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-variable\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultVariable"
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionCreateIssue",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={createdIssue: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionUpdateIssue",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={updatedIssue: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "updateIssue"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionCreateRelease",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={createdRelease: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionUpdateRelease",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={updatedRelease: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "updateRelease"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionGetIssue",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={issues: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "getIssue"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionGetBranch",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={branch: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "getBranch"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionGetRepo",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={repo: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepo"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionUpdateRepo",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={updatedRepo: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "updateRepo"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionCreateOrganizationRepo",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={createdOrganizationRepo: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "createOrganizationRepo"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListReleases",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={releasesList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "listReleases"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListBranches",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={branchList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "listBranches"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListOrganizationRepos",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={organizationRepoList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListRepoContributors",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={repoContributorsList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listRepoContributors"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListRepoCommits",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={commitList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "listCommits"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionSearchIssues",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={searchedIssueList: response.body.items}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "searchIssues"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultCreateReference",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={createdReference: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultCreatePullRequest",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={createdPullRequest: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionListCollaborators",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={collaboratorsList: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "label": "Result expression",
      "id": "resultExpressionGetContent",
      "description": "Expression to map the response into process variables. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#result-expression\" target=\"_blank\">documentation</a>",
      "group": "output",
      "type": "String",
      "feel": "required",
      "value": "={repositoryContent: response.body}",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Connection timeout",
      "description": "Sets the timeout in seconds to establish a connection or 0 for an infinite timeout",
      "group": "errors",
      "type": "String",
      "value": "20",
      "binding": {
        "type": "zeebe:input",
        "name": "connectionTimeoutInSeconds"
      },
      "optional": true,
      "feel": "optional",
      "constraints": {
        "notEmpty": false,
        "pattern": {
          "value": "^(=.+|[0-9]+|\\{\\{secrets\\..+\\}\\})$",
          "message": "must be a timeout in seconds (default value is 20 seconds) or a FEEL expression."
        }
      }
    },
    {
      "type": "Hidden",
      "value": "=\"https://api.github.com\"",
      "binding": {
        "type": "zeebe:input",
        "name": "baseUrl"
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/issues\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssue"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/commits\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "listCommits"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/issues/\" + issueNumber",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "getIssue",
          "updateIssue"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/issues/\" + issueNumber + \"/comments\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "createIssueComment"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/releases\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "createRelease"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/releases/\" + releaseId",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "updateRelease",
          "deleteRelease"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/releases\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "releaseOperationType",
        "oneOf": [
          "listReleases"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/branches\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "listBranches"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/branches/\" + branchName",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "getBranch"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/merges\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "branchOperationType",
        "oneOf": [
          "mergeBranch"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepo",
          "updateRepo",
          "deleteRepo"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/contributors\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listRepoContributors"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/code-scanning/alerts\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "listAlertsOperationType",
        "oneOf": [
          "listAlertsForRepo"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/orgs/\" + orgName + \"/code-scanning/alerts\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos",
          "createOrganizationRepo"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/orgs/\" + orgName + \"/repos\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "listOrganizationRepos",
          "createOrganizationRepo"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/orgs/\" + orgName + \"/invitations\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "orgInvitation"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/search/issues\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "issueOperationType",
        "oneOf": [
          "searchIssues"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/actions/workflows/\" + workflowId + \"/dispatches\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "eventOperationType",
        "oneOf": [
          "createWorkflowDispatchEvent"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/git/refs\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "referenceOperationType",
        "oneOf": [
          "createReference"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/pulls\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "pullRequestOperationType",
        "oneOf": [
          "createPullRequest"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/collaborators\"",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "listCollaboratorsOperationType",
        "oneOf": [
          "listCollaborators"
        ]
      }
    },
    {
      "type": "Hidden",
      "value": "=baseUrl + \"/repos/\" + owner + \"/\" + repo + \"/contents/\" + contentPath",
      "binding": {
        "type": "zeebe:input",
        "name": "url"
      },
      "condition": {
        "property": "reposOperationType",
        "oneOf": [
          "getRepoContent"
        ]
      }
    },
    {
      "label": "Error expression",
      "description": "Expression to handle errors. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/#bpmn-errors\" target=\"_blank\">documentation</a>",
      "group": "errors",
      "type": "Text",
      "feel": "required",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "errorExpression"
      }
    }
  ]
}