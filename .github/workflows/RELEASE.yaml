name: Release a new version
run-name: Release a new version ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version number of release: ^[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9.-]+){0,1}$'
        required: true
      nextVersion:
        description: 'Semantic version number to use as next SNAPSHOT version: ^[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9.-]+){0,1}$'
        required: true
      branch:
        description: 'Git branch to be used in the release'
        default: 'main'

jobs:
  build-and-push:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/connectors/ci/common DOCKERHUB_USER;
            secret/data/products/connectors/ci/common DOCKERHUB_PASSWORD;
            secret/data/products/connectors/ci/common ARTIFACTORY_USR;
            secret/data/products/connectors/ci/common ARTIFACTORY_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
          passphrase: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
      - name: 'Create settings.xml'
        uses: s4u/maven-settings-action@v2.8.0
        with:
          githubServer: false
          servers: |
            [{
               "id": "camunda-nexus",
               "username": "${{ steps.secrets.outputs.ARTIFACTORY_USR }}",
               "password": "${{ steps.secrets.outputs.ARTIFACTORY_PSW }}"
             },
            {
               "id": "central",
               "username": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}",
               "password": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}"
             }
            ]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "camunda-nexus", "name": "camunda Nexus"}]'

      - name: Configure git user
        run: |
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check if new version implies pre-release
        id: check_prerelease
        run: |
          if [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            PRE_RELEASE=false
          else
            PRE_RELEASE=true
          fi
          echo "isPreRelease=${PRE_RELEASE}" >> $GITHUB_OUTPUT

    # Maven build & version bump

      - name: Set Connectors release version
        run:  mvn -B versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Deploy artifacts to Artifactory and Maven Central
        run: mvn -B compile generate-sources source:jar javadoc:jar deploy -PcheckFormat -Psonatype-oss-release
        env:
          NEXUS_USR: ${{ steps.secrets.outputs.ARTIFACTORY_USR }}
          NEXUS_PSW: ${{ steps.secrets.outputs.ARTIFACTORY_PSW }}
          MAVEN_USR: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}
          MAVEN_PSW: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
          MAVEN_GPG_PASSPHRASE: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Commit and tag
        run: |
          git commit -am "ci: release version ${RELEASE_VERSION}"
          git tag -a ${RELEASE_VERSION} -m "ci: release version ${RELEASE_VERSION}"
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Set next development patch version
        run: |
          mvn -B versions:set -DnewVersion=${NEXT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
          git commit -am "ci: set next development version"
          git push --follow-tags
        env:
          NEXT_VERSION: ${{ github.event.inputs.nextVersion }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'arm64,arm'

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          password: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}

    # Build & push bundle docker images (with version tag)

      - name: Build and Push Docker Image tag ${{ github.event.inputs.version }} - bundle-default
        uses: docker/build-push-action@v4
        with:
          context: bundle/mvn/default-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle:${{ github.event.inputs.version }}
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag ${{ github.event.inputs.version }} - bundle-saas
        uses: docker/build-push-action@v4
        with:
          context: bundle/mvn/camunda-saas-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle-saas:${{ github.event.inputs.version }}
          platforms: linux/amd64,linux/arm64
          provenance: false

    # Build & push bundle docker images (with 'latest' tag)

      - name: Build and Push Docker Image tag latest - bundle-default
        if: ${{ steps.check_prerelease.outputs.isPreRelease == 'false' }}
        uses: docker/build-push-action@v4
        with:
          context: bundle/mvn/default-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle:latest
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag latest - bundle-saas
        if: ${{ steps.check_prerelease.outputs.isPreRelease == 'false' }}
        uses: docker/build-push-action@v4
        with:
          context: bundle/mvn/camunda-saas-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle-saas:latest
          platforms: linux/amd64,linux/arm64
          provenance: false

    # Update README in Dockerhub

      - name: Push README to Dockerhub - bundle-default
        if: ${{ steps.check_prerelease.outputs.isPreRelease == 'false' }}
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          DOCKER_PASS: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}
        with:
          destination_container_repo: camunda/connectors-bundle
          provider: dockerhub
          readme_file: bundle/README.md
          short_description: 'Camunda 8 out-of-the-box Connectors Bundle'

      - name: Push README to Dockerhub - bundle-saas
        if: ${{ steps.check_prerelease.outputs.isPreRelease == 'false' }}
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          DOCKER_PASS: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}
        with:
          destination_container_repo: camunda/connectors-bundle-saas
          provider: dockerhub
          readme_file: bundle/README.md
          short_description: 'Camunda 8 out-of-the-box Connectors Bundle for SaaS'

    # Create GitHub release

      - name: Bundle element templates
        run: bash bundle/bundle-templates.sh ${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Build Changelog
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.event.inputs.version }}
          writeToFile: false
          excludeTypes: build,docs,other,style,ci

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.check_prerelease.outputs.isPreRelease }}
          body: ${{ steps.changelog.outputs.changes }}
          tag_name: ${{ github.event.inputs.version }}
          files: |
            THIRD_PARTY_NOTICES
            connectors-bundle-templates-${{ github.event.inputs.version }}.tar.gz
            connectors-bundle-templates-${{ github.event.inputs.version }}.zip
