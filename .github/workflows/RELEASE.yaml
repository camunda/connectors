name: Release a new version
run-name: Release a new version ${{ github.event.release.tag_name }}

on:
  release:
    types: [ created ]

jobs:

  setup:
    name: Prepare the repository
    runs-on: ubuntu-latest
    outputs:
      tagType: ${{ steps.prev_version.outputs.release_type }}
      releaseBranch: ${{ steps.determine_release_branch.outputs.releaseBranch }}
      previousTag: ${{ steps.prev_version.outputs.previous_version }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0
      - name: Identify previous release version
        id: prev_version
        uses: camunda/infra-global-github-actions/previous-version@main
        with:
          version: "${{ github.event.release.tag_name }}"
          verbose: 'false'
      # We will update this branch by setting the new version and pushing it
      - name: Determine release branch name
        id: determine_release_branch
        run: |
          releaseBranch=$( git branch --contains ${RELEASE_VERSION} --format='%(refname:short)' )
          git checkout "$releaseBranch"
          echo "releaseBranch=$releaseBranch" >> $GITHUB_OUTPUT
        env:
          RELEASE_VERSION: ${{ github.event.release.tag_name }}

      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PROTECTED_BRANCH_PAT }}
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install element templates CLI
        run: npm install --global element-templates-cli

      # Maven build & version bump
      - name: Set Connectors release version
        run: mvn -B versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false -f parent
        env:
          RELEASE_VERSION: ${{ github.event.release.tag_name }}

      - name: Compile and Test
        run: mvn -B package generate-sources source:jar javadoc:jar

      - name: Generate sbom reports
        run: |
          mvn cyclonedx:makeAggregateBom -pl bundle/default-bundle

      - name: Configure git user
        run: |
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and tag
        run: |
          git commit -am "ci: release version ${RELEASE_VERSION}"
          git push --force-with-lease origin ${RELEASE_BRANCH}
          git tag -fa ${RELEASE_VERSION} -m "ci: release version ${RELEASE_VERSION}"
          git push --force origin ${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ github.event.release.tag_name }}
          RELEASE_BRANCH: ${{ needs.setup.outputs.releaseBranch }}

      - name: Upload repository
        uses: actions/upload-artifact@v4
        with:
          name: repository
          path: .
          include-hidden-files: 'true'


  version-bump-docs-links:
    needs: setup
    name: Version bump documentation links, if this is the first minor release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: git fetch origin main

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine if first minor release
        id: version_check
        env:
          VERSION: ${{ inputs.tag_name }}  # e.g. "8.8.0"
        run: |
          if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\.0$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            current_minor="${major}.${minor}"
            previous_minor="${major}.$((minor - 1))"
  
            echo "is_first_minor=true" >> $GITHUB_OUTPUT
            echo "current_minor=${current_minor}" >> $GITHUB_OUTPUT
            echo "previous_minor=${previous_minor}" >> $GITHUB_OUTPUT
          else
            echo "is_first_minor=false" >> $GITHUB_OUTPUT
          fi

      - name: Collect connector template links
        if: steps.version_check.outputs.is_first_minor == 'true'
        run: |
          chmod +x ./.github/workflows/scripts/version_bump_all_element_templates_docs_links_versions.sh
          ./.github/workflows/scripts/version_bump_all_element_templates_docs_links_versions.sh ${{ steps.version_check.outputs.previous_minor }} ${{ steps.version_check.outputs.current_minor }}
        shell: bash

      - name: Create pull request to main branch
        if: steps.version_check.outputs.is_first_minor == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/version-bump-docs-links
          commit-message: "ci: bump docs version from ${{ steps.version_check.outputs.previous_minor }} to ${{ steps.version_check.outputs.current_minor }}"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          base: main
          title: "chore(docs-links): bump versions from ${{ steps.version_check.outputs.previous_minor }} to ${{ steps.version_check.outputs.current_minor }}"
          labels: "no milestone"
          body: |
            This bumps docs version of latest's element templates of a connector to latest minor version.

  maven-release:
    needs: setup
    name: Create a maven release
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v4
        with:
          name: repository

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/connectors/ci/common ARTIFACTORY_USR;
            secret/data/products/connectors/ci/common ARTIFACTORY_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
          passphrase: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: 'Create settings.xml'
        uses: s4u/maven-settings-action@v3.1.0
        with:
          githubServer: false
          servers: |
            [{
               "id": "camunda-nexus",
               "username": "${{ steps.secrets.outputs.ARTIFACTORY_USR }}",
               "password": "${{ steps.secrets.outputs.ARTIFACTORY_PSW }}"
             },
            {
               "id": "central",
               "username": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}",
               "password": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}"
             }
            ]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "*,!confluent,!shibboleth", "name": "camunda Nexus"}]'

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Deploy artifacts to Artifactory and Maven Central (Staging)
        if: "! contains(github.event.release.tag_name, 'rc')"
        run: mvn deploy -DskipTests -PcheckFormat -Pcentral-sonatype-publish -Pe2eExcluded
        env:
          NEXUS_USR: ${{ steps.secrets.outputs.ARTIFACTORY_USR }}
          NEXUS_PSW: ${{ steps.secrets.outputs.ARTIFACTORY_PSW }}
          MAVEN_USR: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}
          MAVEN_PSW: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
          MAVEN_GPG_PASSPHRASE: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Deploy artifacts to Artifactory
        if: "contains(github.event.release.tag_name, 'rc')"
        run: mvn deploy -DskipTests -PcheckFormat -Pcentral-sonatype-publish -Dskip.central.release=true -Pe2eExcluded
        env:
          NEXUS_USR: ${{ steps.secrets.outputs.ARTIFACTORY_USR }}
          NEXUS_PSW: ${{ steps.secrets.outputs.ARTIFACTORY_PSW }}
          MAVEN_USR: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}
          MAVEN_PSW: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
          MAVEN_GPG_PASSPHRASE: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

  docker-release:
    needs: setup
    runs-on: ubuntu-latest
    name: Perform the docker release
    steps:
      - name: Download repository
        uses: actions/download-artifact@v4
        with:
          name: repository

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/connectors/ci/common DOCKERHUB_USER;
            secret/data/products/connectors/ci/common DOCKERHUB_PASSWORD;

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,arm'

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          password: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}

      # Build & push bundle docker images (with version tag)

      - name: Build and Push Docker Image tag ${{ github.event.release.tag_name }} - connector-runtime
        uses: docker/build-push-action@v6
        with:
          context: connector-runtime/connector-runtime-application/
          push: true
          tags: camunda/connectors:${{ github.event.release.tag_name }}
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag ${{ github.event.release.tag_name }} - bundle-default
        uses: docker/build-push-action@v6
        with:
          context: bundle/default-bundle/
          push: true
          tags: camunda/connectors-bundle:${{ github.event.release.tag_name }}
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag ${{ github.event.release.tag_name }} - bundle-saas
        uses: docker/build-push-action@v6
        with:
          context: bundle/camunda-saas-bundle/
          push: true
          tags: camunda/connectors-bundle-saas:${{ github.event.release.tag_name }}
          platforms: linux/amd64,linux/arm64
          provenance: false

      # Build & push bundle docker images (with 'latest' tag)

      - name: Build and Push Docker Image tag latest - connector-runtime
        uses: docker/build-push-action@v6
        with:
          context: connector-runtime/connector-runtime-application/
          push: true
          tags: camunda/connectors:latest
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag latest - bundle-default
        if: ${{ needs.setup.outputs.tagType == 'NORMAL' }}
        uses: docker/build-push-action@v6
        with:
          context: bundle/default-bundle/
          push: true
          tags: camunda/connectors-bundle:latest
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and Push Docker Image tag latest - bundle-saas
        if: ${{ needs.setup.outputs.tagType == 'NORMAL' }}
        uses: docker/build-push-action@v6
        with:
          context: bundle/camunda-saas-bundle/
          push: true
          tags: camunda/connectors-bundle-saas:latest
          platforms: linux/amd64,linux/arm64
          provenance: false

      # Update README in Dockerhub

      - name: Push README to Dockerhub - bundle-default
        if: ${{ needs.setup.outputs.tagType == 'NORMAL' }}
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          DOCKER_PASS: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}
        with:
          destination_container_repo: camunda/connectors-bundle
          provider: dockerhub
          readme_file: bundle/README.md
          short_description: 'Camunda out-of-the-box Connectors Bundle'

      - name: Push README to Dockerhub - bundle-saas
        if: ${{ needs.setup.outputs.tagType == 'NORMAL' }}
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          DOCKER_PASS: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}
        with:
          destination_container_repo: camunda/connectors-bundle-saas
          provider: dockerhub
          readme_file: bundle/README.md
          short_description: 'Camunda out-of-the-box Connectors Bundle for SaaS'

  bundle-and-build-changelog:
    needs: setup
    name: Bundle and generate changelogs
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v4
        with:
          name: repository

      # Update GitHub release
      - name: Bundle element templates
        run: bash bundle/bundle-templates.sh ${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ github.event.release.tag_name }}

      - name: Build Changelog
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          fromTag: ${{ github.event.release.tag_name }}
          toTag: ${{ needs.setup.outputs.previousTag }}
          writeToFile: false
          excludeTypes: build,docs,other,style,ci
          excludeScopes: deps

      - name: Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ needs.setup.outputs.tagType != 'NORMAL' }}
          body: ${{ steps.changelog.outputs.changes }}
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            bundle/default-bundle/target/connectors-bundle-sbom.json
            bundle/default-bundle/target/connectors-bundle-sbom.xml
            connectors-bundle-templates-${{ github.event.release.tag_name }}.tar.gz
            connectors-bundle-templates-${{ github.event.release.tag_name }}.zip


  helm-deploy:
    needs: [setup, docker-release]
    name: Run Helm Integration Tests
    uses: ./.github/workflows/INTEGRATION_TEST.yml
    secrets: inherit
    with:
      connectors-version: ${{ github.event.release.tag_name }}
      release-branch: ${{ needs.setup.outputs.releaseBranch }}