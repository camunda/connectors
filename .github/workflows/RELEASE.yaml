name: Build and Push Release Artifacts and Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version number of release: ^[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9.-]+){0,1}$'
        required: true
      nextVersion:
        description: 'Semantic version number to use as next SNAPSHOT version: ^[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9.-]+){0,1}$'
        required: true
      release-runtime:
        description: 'Release the Docker image for Connector Runtime'
        type: boolean
        default: true
      release-bundle:
        description: 'Release the Docker image for Connectors Bundle'
        type: boolean
        default: true
      branch:
        description: 'Git branch of Dockerfile to be used in the release'
        default: 'main'
      push-latest:
        description: 'Push docker image with latest tag, i.e. this is the latest stable version released'
        type: boolean
        default: true

jobs:
  build-and-push:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/connectors/ci/common DOCKERHUB_USER;
            secret/data/products/connectors/ci/common DOCKERHUB_PASSWORD;
            secret/data/products/connectors/ci/common ARTIFACTORY_USR;
            secret/data/products/connectors/ci/common ARTIFACTORY_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
          passphrase: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Create ~/.m2/settings.xml
        shell: bash
        run: |
          cat <<EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <interactiveMode>false</interactiveMode>
            <servers>
              <server>
                <id>camunda-nexus</id>
                <username>\${env.NEXUS_USR}</username>
                <password>\${env.NEXUS_PSW}</password>
              </server>
              <server>
                <id>central</id>
                <username>\${env.MAVEN_USR}</username>
                <password>\${env.MAVEN_PSW}</password>
              </server>
              <server>
                <id>gpg.passphrase</id>
                <passphrase>\${env.MAVEN_GPG_PASSPHRASE}</passphrase>
              </server>
            </servers>
          </settings>
          EOF
          
      - name: Configure git user
        run: |
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    # Maven build & version bump

      - name: Set Connectors release version
        run:  mvn -B versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Deploy artifacts to Artifactory and Maven Central
        run: mvn -B compile generate-sources source:jar javadoc:jar deploy -PcheckFormat -Psonatype-oss-release
        env:
          NEXUS_USR: ${{ steps.secrets.outputs.ARTIFACTORY_USR }}
          NEXUS_PSW: ${{ steps.secrets.outputs.ARTIFACTORY_PSW }}
          MAVEN_USR: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}
          MAVEN_PSW: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
          MAVEN_GPG_PASSPHRASE: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Commit and tag
        run: |
          git commit -am "ci: release version ${RELEASE_VERSION}"
          git tag -a ${RELEASE_VERSION} -m "ci: release version ${RELEASE_VERSION}"
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Set next development patch version
        run: |
          mvn -B versions:set -DnewVersion=${NEXT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
          git commit -am "ci: set next development version"
          git push --follow-tags
        env:
          NEXT_VERSION: ${{ github.event.inputs.nextVersion }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.secrets.outputs.DOCKERHUB_USER }}
          password: ${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}

    # Build & push bundle docker images (with version tag)

      - name: Build and Push Docker Image tag ${{ github.event.inputs.version }} - bundle-default
        if: github.event.inputs.release-bundle == 'true'
        uses: docker/build-push-action@v3
        with:
          context: bundle/mvn/default-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle:${{ github.event.inputs.version }}

      - name: Build and Push Docker Image tag ${{ github.event.inputs.version }} - bundle-saas
        if: github.event.inputs.release-bundle == 'true'
        uses: docker/build-push-action@v3
        with:
          context: bundle/mvn/camunda-saas-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle-saas:${{ github.event.inputs.version }}

    # Build & push bundle docker images (with 'latest' tag)

      - name: Build and Push Docker Image tag latest - bundle-default
        if: github.event.inputs.release-bundle == 'true' && github.event.inputs.push-latest == 'true'
        uses: docker/build-push-action@v3
        with:
          context: bundle/mvn/default-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle:latest

      - name: Build and Push Docker Image tag latest - bundle-saas
        if: github.event.inputs.release-bundle == 'true' && github.event.inputs.push-latest == 'true'
        uses: docker/build-push-action@v3
        with:
          context: bundle/mvn/camunda-saas-bundle/
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: camunda/connectors-bundle-saas:latest

    # Create GitHub release

      - name: Bundle element templates
        if: github.event.inputs.release-bundle == 'true'
        run: bash bundle/bundle-templates.sh ${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Build Changelog
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.event.inputs.version }}
          writeToFile: false
          excludeTypes: build,docs,other,style,ci

      - name: Create GitHub Release
        if: github.event.inputs.release-bundle == 'true'
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changes }}
          tag_name: ${{ github.event.inputs.version }}
          files: |
            THIRD_PARTY_NOTICES
            connectors-bundle-templates-${{ github.event.inputs.version }}.tar.gz
            connectors-bundle-templates-${{ github.event.inputs.version }}.zip
